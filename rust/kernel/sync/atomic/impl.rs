// SPDX-License-Identifier: GPL-2.0

//! Generated by scripts/atomic/gen-rust-atomic.sh
//! DO NOT MODIFY THIS FILE DIRECTLY

use super::*;
use crate::bindings::*;

impl AtomicI32 {
    /// See `atomic_read`.
    #[inline(always)]
    pub fn read(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_read(self.0.get());
        }
    }
    /// See `atomic_read_acquire`.
    #[inline(always)]
    pub fn read_acquire(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_read_acquire(self.0.get());
        }
    }
    /// See `atomic_set`.
    #[inline(always)]
    pub fn set(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_set(self.0.get(), i);
        }
    }
    /// See `atomic_set_release`.
    #[inline(always)]
    pub fn set_release(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_set_release(self.0.get(), i);
        }
    }
    /// See `atomic_add`.
    #[inline(always)]
    pub fn add(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_add(i, self.0.get());
        }
    }
    /// See `atomic_add_return`.
    #[inline(always)]
    pub fn add_return(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_return(i, self.0.get());
        }
    }
    /// See `atomic_add_return_acquire`.
    #[inline(always)]
    pub fn add_return_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_return_acquire(i, self.0.get());
        }
    }
    /// See `atomic_add_return_release`.
    #[inline(always)]
    pub fn add_return_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_return_release(i, self.0.get());
        }
    }
    /// See `atomic_add_return_relaxed`.
    #[inline(always)]
    pub fn add_return_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_return_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_fetch_add`.
    #[inline(always)]
    pub fn fetch_add(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_add(i, self.0.get());
        }
    }
    /// See `atomic_fetch_add_acquire`.
    #[inline(always)]
    pub fn fetch_add_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_add_acquire(i, self.0.get());
        }
    }
    /// See `atomic_fetch_add_release`.
    #[inline(always)]
    pub fn fetch_add_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_add_release(i, self.0.get());
        }
    }
    /// See `atomic_fetch_add_relaxed`.
    #[inline(always)]
    pub fn fetch_add_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_add_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_sub`.
    #[inline(always)]
    pub fn sub(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_sub(i, self.0.get());
        }
    }
    /// See `atomic_sub_return`.
    #[inline(always)]
    pub fn sub_return(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_sub_return(i, self.0.get());
        }
    }
    /// See `atomic_sub_return_acquire`.
    #[inline(always)]
    pub fn sub_return_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_sub_return_acquire(i, self.0.get());
        }
    }
    /// See `atomic_sub_return_release`.
    #[inline(always)]
    pub fn sub_return_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_sub_return_release(i, self.0.get());
        }
    }
    /// See `atomic_sub_return_relaxed`.
    #[inline(always)]
    pub fn sub_return_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_sub_return_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_fetch_sub`.
    #[inline(always)]
    pub fn fetch_sub(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_sub(i, self.0.get());
        }
    }
    /// See `atomic_fetch_sub_acquire`.
    #[inline(always)]
    pub fn fetch_sub_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_sub_acquire(i, self.0.get());
        }
    }
    /// See `atomic_fetch_sub_release`.
    #[inline(always)]
    pub fn fetch_sub_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_sub_release(i, self.0.get());
        }
    }
    /// See `atomic_fetch_sub_relaxed`.
    #[inline(always)]
    pub fn fetch_sub_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_sub_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_inc`.
    #[inline(always)]
    pub fn inc(&self) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_inc(self.0.get());
        }
    }
    /// See `atomic_inc_return`.
    #[inline(always)]
    pub fn inc_return(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_inc_return(self.0.get());
        }
    }
    /// See `atomic_inc_return_acquire`.
    #[inline(always)]
    pub fn inc_return_acquire(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_inc_return_acquire(self.0.get());
        }
    }
    /// See `atomic_inc_return_release`.
    #[inline(always)]
    pub fn inc_return_release(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_inc_return_release(self.0.get());
        }
    }
    /// See `atomic_inc_return_relaxed`.
    #[inline(always)]
    pub fn inc_return_relaxed(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_inc_return_relaxed(self.0.get());
        }
    }
    /// See `atomic_fetch_inc`.
    #[inline(always)]
    pub fn fetch_inc(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_inc(self.0.get());
        }
    }
    /// See `atomic_fetch_inc_acquire`.
    #[inline(always)]
    pub fn fetch_inc_acquire(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_inc_acquire(self.0.get());
        }
    }
    /// See `atomic_fetch_inc_release`.
    #[inline(always)]
    pub fn fetch_inc_release(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_inc_release(self.0.get());
        }
    }
    /// See `atomic_fetch_inc_relaxed`.
    #[inline(always)]
    pub fn fetch_inc_relaxed(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_inc_relaxed(self.0.get());
        }
    }
    /// See `atomic_dec`.
    #[inline(always)]
    pub fn dec(&self) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_dec(self.0.get());
        }
    }
    /// See `atomic_dec_return`.
    #[inline(always)]
    pub fn dec_return(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_dec_return(self.0.get());
        }
    }
    /// See `atomic_dec_return_acquire`.
    #[inline(always)]
    pub fn dec_return_acquire(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_dec_return_acquire(self.0.get());
        }
    }
    /// See `atomic_dec_return_release`.
    #[inline(always)]
    pub fn dec_return_release(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_dec_return_release(self.0.get());
        }
    }
    /// See `atomic_dec_return_relaxed`.
    #[inline(always)]
    pub fn dec_return_relaxed(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_dec_return_relaxed(self.0.get());
        }
    }
    /// See `atomic_fetch_dec`.
    #[inline(always)]
    pub fn fetch_dec(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_dec(self.0.get());
        }
    }
    /// See `atomic_fetch_dec_acquire`.
    #[inline(always)]
    pub fn fetch_dec_acquire(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_dec_acquire(self.0.get());
        }
    }
    /// See `atomic_fetch_dec_release`.
    #[inline(always)]
    pub fn fetch_dec_release(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_dec_release(self.0.get());
        }
    }
    /// See `atomic_fetch_dec_relaxed`.
    #[inline(always)]
    pub fn fetch_dec_relaxed(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_dec_relaxed(self.0.get());
        }
    }
    /// See `atomic_and`.
    #[inline(always)]
    pub fn and(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_and(i, self.0.get());
        }
    }
    /// See `atomic_fetch_and`.
    #[inline(always)]
    pub fn fetch_and(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_and(i, self.0.get());
        }
    }
    /// See `atomic_fetch_and_acquire`.
    #[inline(always)]
    pub fn fetch_and_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_and_acquire(i, self.0.get());
        }
    }
    /// See `atomic_fetch_and_release`.
    #[inline(always)]
    pub fn fetch_and_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_and_release(i, self.0.get());
        }
    }
    /// See `atomic_fetch_and_relaxed`.
    #[inline(always)]
    pub fn fetch_and_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_and_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_andnot`.
    #[inline(always)]
    pub fn andnot(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_andnot(i, self.0.get());
        }
    }
    /// See `atomic_fetch_andnot`.
    #[inline(always)]
    pub fn fetch_andnot(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_andnot(i, self.0.get());
        }
    }
    /// See `atomic_fetch_andnot_acquire`.
    #[inline(always)]
    pub fn fetch_andnot_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_andnot_acquire(i, self.0.get());
        }
    }
    /// See `atomic_fetch_andnot_release`.
    #[inline(always)]
    pub fn fetch_andnot_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_andnot_release(i, self.0.get());
        }
    }
    /// See `atomic_fetch_andnot_relaxed`.
    #[inline(always)]
    pub fn fetch_andnot_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_andnot_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_or`.
    #[inline(always)]
    pub fn or(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_or(i, self.0.get());
        }
    }
    /// See `atomic_fetch_or`.
    #[inline(always)]
    pub fn fetch_or(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_or(i, self.0.get());
        }
    }
    /// See `atomic_fetch_or_acquire`.
    #[inline(always)]
    pub fn fetch_or_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_or_acquire(i, self.0.get());
        }
    }
    /// See `atomic_fetch_or_release`.
    #[inline(always)]
    pub fn fetch_or_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_or_release(i, self.0.get());
        }
    }
    /// See `atomic_fetch_or_relaxed`.
    #[inline(always)]
    pub fn fetch_or_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_or_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_xor`.
    #[inline(always)]
    pub fn xor(&self, i: i32) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic_xor(i, self.0.get());
        }
    }
    /// See `atomic_fetch_xor`.
    #[inline(always)]
    pub fn fetch_xor(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_xor(i, self.0.get());
        }
    }
    /// See `atomic_fetch_xor_acquire`.
    #[inline(always)]
    pub fn fetch_xor_acquire(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_xor_acquire(i, self.0.get());
        }
    }
    /// See `atomic_fetch_xor_release`.
    #[inline(always)]
    pub fn fetch_xor_release(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_xor_release(i, self.0.get());
        }
    }
    /// See `atomic_fetch_xor_relaxed`.
    #[inline(always)]
    pub fn fetch_xor_relaxed(&self, i: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_xor_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_xchg`.
    #[inline(always)]
    pub fn xchg(&self, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_xchg(self.0.get(), new);
        }
    }
    /// See `atomic_xchg_acquire`.
    #[inline(always)]
    pub fn xchg_acquire(&self, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_xchg_acquire(self.0.get(), new);
        }
    }
    /// See `atomic_xchg_release`.
    #[inline(always)]
    pub fn xchg_release(&self, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_xchg_release(self.0.get(), new);
        }
    }
    /// See `atomic_xchg_relaxed`.
    #[inline(always)]
    pub fn xchg_relaxed(&self, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_xchg_relaxed(self.0.get(), new);
        }
    }
    /// See `atomic_cmpxchg`.
    #[inline(always)]
    pub fn cmpxchg(&self, old: i32, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_cmpxchg(self.0.get(), old, new);
        }
    }
    /// See `atomic_cmpxchg_acquire`.
    #[inline(always)]
    pub fn cmpxchg_acquire(&self, old: i32, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_cmpxchg_acquire(self.0.get(), old, new);
        }
    }
    /// See `atomic_cmpxchg_release`.
    #[inline(always)]
    pub fn cmpxchg_release(&self, old: i32, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_cmpxchg_release(self.0.get(), old, new);
        }
    }
    /// See `atomic_cmpxchg_relaxed`.
    #[inline(always)]
    pub fn cmpxchg_relaxed(&self, old: i32, new: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_cmpxchg_relaxed(self.0.get(), old, new);
        }
    }
    /// See `atomic_try_cmpxchg`.
    #[inline(always)]
    pub fn try_cmpxchg(&self, old: &mut i32, new: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_try_cmpxchg(self.0.get(), old, new);
        }
    }
    /// See `atomic_try_cmpxchg_acquire`.
    #[inline(always)]
    pub fn try_cmpxchg_acquire(&self, old: &mut i32, new: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_try_cmpxchg_acquire(self.0.get(), old, new);
        }
    }
    /// See `atomic_try_cmpxchg_release`.
    #[inline(always)]
    pub fn try_cmpxchg_release(&self, old: &mut i32, new: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_try_cmpxchg_release(self.0.get(), old, new);
        }
    }
    /// See `atomic_try_cmpxchg_relaxed`.
    #[inline(always)]
    pub fn try_cmpxchg_relaxed(&self, old: &mut i32, new: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_try_cmpxchg_relaxed(self.0.get(), old, new);
        }
    }
    /// See `atomic_sub_and_test`.
    #[inline(always)]
    pub fn sub_and_test(&self, i: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_sub_and_test(i, self.0.get());
        }
    }
    /// See `atomic_dec_and_test`.
    #[inline(always)]
    pub fn dec_and_test(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_dec_and_test(self.0.get());
        }
    }
    /// See `atomic_inc_and_test`.
    #[inline(always)]
    pub fn inc_and_test(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_inc_and_test(self.0.get());
        }
    }
    /// See `atomic_add_negative`.
    #[inline(always)]
    pub fn add_negative(&self, i: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_negative(i, self.0.get());
        }
    }
    /// See `atomic_add_negative_acquire`.
    #[inline(always)]
    pub fn add_negative_acquire(&self, i: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_negative_acquire(i, self.0.get());
        }
    }
    /// See `atomic_add_negative_release`.
    #[inline(always)]
    pub fn add_negative_release(&self, i: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_negative_release(i, self.0.get());
        }
    }
    /// See `atomic_add_negative_relaxed`.
    #[inline(always)]
    pub fn add_negative_relaxed(&self, i: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_negative_relaxed(i, self.0.get());
        }
    }
    /// See `atomic_fetch_add_unless`.
    #[inline(always)]
    pub fn fetch_add_unless(&self, a: i32, u: i32) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_fetch_add_unless(self.0.get(), a, u);
        }
    }
    /// See `atomic_add_unless`.
    #[inline(always)]
    pub fn add_unless(&self, a: i32, u: i32) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_add_unless(self.0.get(), a, u);
        }
    }
    /// See `atomic_inc_not_zero`.
    #[inline(always)]
    pub fn inc_not_zero(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_inc_not_zero(self.0.get());
        }
    }
    /// See `atomic_inc_unless_negative`.
    #[inline(always)]
    pub fn inc_unless_negative(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_inc_unless_negative(self.0.get());
        }
    }
    /// See `atomic_dec_unless_positive`.
    #[inline(always)]
    pub fn dec_unless_positive(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_dec_unless_positive(self.0.get());
        }
    }
    /// See `atomic_dec_if_positive`.
    #[inline(always)]
    pub fn dec_if_positive(&self) -> i32 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic_dec_if_positive(self.0.get());
        }
    }
}

impl AtomicI64 {
    /// See `atomic64_read`.
    #[inline(always)]
    pub fn read(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_read(self.0.get());
        }
    }
    /// See `atomic64_read_acquire`.
    #[inline(always)]
    pub fn read_acquire(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_read_acquire(self.0.get());
        }
    }
    /// See `atomic64_set`.
    #[inline(always)]
    pub fn set(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_set(self.0.get(), i);
        }
    }
    /// See `atomic64_set_release`.
    #[inline(always)]
    pub fn set_release(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_set_release(self.0.get(), i);
        }
    }
    /// See `atomic64_add`.
    #[inline(always)]
    pub fn add(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_add(i, self.0.get());
        }
    }
    /// See `atomic64_add_return`.
    #[inline(always)]
    pub fn add_return(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_return(i, self.0.get());
        }
    }
    /// See `atomic64_add_return_acquire`.
    #[inline(always)]
    pub fn add_return_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_return_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_add_return_release`.
    #[inline(always)]
    pub fn add_return_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_return_release(i, self.0.get());
        }
    }
    /// See `atomic64_add_return_relaxed`.
    #[inline(always)]
    pub fn add_return_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_return_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_add`.
    #[inline(always)]
    pub fn fetch_add(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_add(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_add_acquire`.
    #[inline(always)]
    pub fn fetch_add_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_add_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_add_release`.
    #[inline(always)]
    pub fn fetch_add_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_add_release(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_add_relaxed`.
    #[inline(always)]
    pub fn fetch_add_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_add_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_sub`.
    #[inline(always)]
    pub fn sub(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_sub(i, self.0.get());
        }
    }
    /// See `atomic64_sub_return`.
    #[inline(always)]
    pub fn sub_return(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_sub_return(i, self.0.get());
        }
    }
    /// See `atomic64_sub_return_acquire`.
    #[inline(always)]
    pub fn sub_return_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_sub_return_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_sub_return_release`.
    #[inline(always)]
    pub fn sub_return_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_sub_return_release(i, self.0.get());
        }
    }
    /// See `atomic64_sub_return_relaxed`.
    #[inline(always)]
    pub fn sub_return_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_sub_return_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_sub`.
    #[inline(always)]
    pub fn fetch_sub(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_sub(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_sub_acquire`.
    #[inline(always)]
    pub fn fetch_sub_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_sub_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_sub_release`.
    #[inline(always)]
    pub fn fetch_sub_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_sub_release(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_sub_relaxed`.
    #[inline(always)]
    pub fn fetch_sub_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_sub_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_inc`.
    #[inline(always)]
    pub fn inc(&self) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_inc(self.0.get());
        }
    }
    /// See `atomic64_inc_return`.
    #[inline(always)]
    pub fn inc_return(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_inc_return(self.0.get());
        }
    }
    /// See `atomic64_inc_return_acquire`.
    #[inline(always)]
    pub fn inc_return_acquire(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_inc_return_acquire(self.0.get());
        }
    }
    /// See `atomic64_inc_return_release`.
    #[inline(always)]
    pub fn inc_return_release(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_inc_return_release(self.0.get());
        }
    }
    /// See `atomic64_inc_return_relaxed`.
    #[inline(always)]
    pub fn inc_return_relaxed(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_inc_return_relaxed(self.0.get());
        }
    }
    /// See `atomic64_fetch_inc`.
    #[inline(always)]
    pub fn fetch_inc(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_inc(self.0.get());
        }
    }
    /// See `atomic64_fetch_inc_acquire`.
    #[inline(always)]
    pub fn fetch_inc_acquire(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_inc_acquire(self.0.get());
        }
    }
    /// See `atomic64_fetch_inc_release`.
    #[inline(always)]
    pub fn fetch_inc_release(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_inc_release(self.0.get());
        }
    }
    /// See `atomic64_fetch_inc_relaxed`.
    #[inline(always)]
    pub fn fetch_inc_relaxed(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_inc_relaxed(self.0.get());
        }
    }
    /// See `atomic64_dec`.
    #[inline(always)]
    pub fn dec(&self) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_dec(self.0.get());
        }
    }
    /// See `atomic64_dec_return`.
    #[inline(always)]
    pub fn dec_return(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_dec_return(self.0.get());
        }
    }
    /// See `atomic64_dec_return_acquire`.
    #[inline(always)]
    pub fn dec_return_acquire(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_dec_return_acquire(self.0.get());
        }
    }
    /// See `atomic64_dec_return_release`.
    #[inline(always)]
    pub fn dec_return_release(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_dec_return_release(self.0.get());
        }
    }
    /// See `atomic64_dec_return_relaxed`.
    #[inline(always)]
    pub fn dec_return_relaxed(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_dec_return_relaxed(self.0.get());
        }
    }
    /// See `atomic64_fetch_dec`.
    #[inline(always)]
    pub fn fetch_dec(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_dec(self.0.get());
        }
    }
    /// See `atomic64_fetch_dec_acquire`.
    #[inline(always)]
    pub fn fetch_dec_acquire(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_dec_acquire(self.0.get());
        }
    }
    /// See `atomic64_fetch_dec_release`.
    #[inline(always)]
    pub fn fetch_dec_release(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_dec_release(self.0.get());
        }
    }
    /// See `atomic64_fetch_dec_relaxed`.
    #[inline(always)]
    pub fn fetch_dec_relaxed(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_dec_relaxed(self.0.get());
        }
    }
    /// See `atomic64_and`.
    #[inline(always)]
    pub fn and(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_and(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_and`.
    #[inline(always)]
    pub fn fetch_and(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_and(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_and_acquire`.
    #[inline(always)]
    pub fn fetch_and_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_and_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_and_release`.
    #[inline(always)]
    pub fn fetch_and_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_and_release(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_and_relaxed`.
    #[inline(always)]
    pub fn fetch_and_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_and_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_andnot`.
    #[inline(always)]
    pub fn andnot(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_andnot(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_andnot`.
    #[inline(always)]
    pub fn fetch_andnot(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_andnot(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_andnot_acquire`.
    #[inline(always)]
    pub fn fetch_andnot_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_andnot_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_andnot_release`.
    #[inline(always)]
    pub fn fetch_andnot_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_andnot_release(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_andnot_relaxed`.
    #[inline(always)]
    pub fn fetch_andnot_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_andnot_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_or`.
    #[inline(always)]
    pub fn or(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_or(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_or`.
    #[inline(always)]
    pub fn fetch_or(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_or(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_or_acquire`.
    #[inline(always)]
    pub fn fetch_or_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_or_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_or_release`.
    #[inline(always)]
    pub fn fetch_or_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_or_release(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_or_relaxed`.
    #[inline(always)]
    pub fn fetch_or_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_or_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_xor`.
    #[inline(always)]
    pub fn xor(&self, i: i64) {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            atomic64_xor(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_xor`.
    #[inline(always)]
    pub fn fetch_xor(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_xor(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_xor_acquire`.
    #[inline(always)]
    pub fn fetch_xor_acquire(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_xor_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_xor_release`.
    #[inline(always)]
    pub fn fetch_xor_release(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_xor_release(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_xor_relaxed`.
    #[inline(always)]
    pub fn fetch_xor_relaxed(&self, i: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_xor_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_xchg`.
    #[inline(always)]
    pub fn xchg(&self, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_xchg(self.0.get(), new);
        }
    }
    /// See `atomic64_xchg_acquire`.
    #[inline(always)]
    pub fn xchg_acquire(&self, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_xchg_acquire(self.0.get(), new);
        }
    }
    /// See `atomic64_xchg_release`.
    #[inline(always)]
    pub fn xchg_release(&self, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_xchg_release(self.0.get(), new);
        }
    }
    /// See `atomic64_xchg_relaxed`.
    #[inline(always)]
    pub fn xchg_relaxed(&self, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_xchg_relaxed(self.0.get(), new);
        }
    }
    /// See `atomic64_cmpxchg`.
    #[inline(always)]
    pub fn cmpxchg(&self, old: i64, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_cmpxchg(self.0.get(), old, new);
        }
    }
    /// See `atomic64_cmpxchg_acquire`.
    #[inline(always)]
    pub fn cmpxchg_acquire(&self, old: i64, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_cmpxchg_acquire(self.0.get(), old, new);
        }
    }
    /// See `atomic64_cmpxchg_release`.
    #[inline(always)]
    pub fn cmpxchg_release(&self, old: i64, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_cmpxchg_release(self.0.get(), old, new);
        }
    }
    /// See `atomic64_cmpxchg_relaxed`.
    #[inline(always)]
    pub fn cmpxchg_relaxed(&self, old: i64, new: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_cmpxchg_relaxed(self.0.get(), old, new);
        }
    }
    /// See `atomic64_try_cmpxchg`.
    #[inline(always)]
    pub fn try_cmpxchg(&self, old: &mut i64, new: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_try_cmpxchg(self.0.get(), old, new);
        }
    }
    /// See `atomic64_try_cmpxchg_acquire`.
    #[inline(always)]
    pub fn try_cmpxchg_acquire(&self, old: &mut i64, new: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_try_cmpxchg_acquire(self.0.get(), old, new);
        }
    }
    /// See `atomic64_try_cmpxchg_release`.
    #[inline(always)]
    pub fn try_cmpxchg_release(&self, old: &mut i64, new: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_try_cmpxchg_release(self.0.get(), old, new);
        }
    }
    /// See `atomic64_try_cmpxchg_relaxed`.
    #[inline(always)]
    pub fn try_cmpxchg_relaxed(&self, old: &mut i64, new: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_try_cmpxchg_relaxed(self.0.get(), old, new);
        }
    }
    /// See `atomic64_sub_and_test`.
    #[inline(always)]
    pub fn sub_and_test(&self, i: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_sub_and_test(i, self.0.get());
        }
    }
    /// See `atomic64_dec_and_test`.
    #[inline(always)]
    pub fn dec_and_test(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_dec_and_test(self.0.get());
        }
    }
    /// See `atomic64_inc_and_test`.
    #[inline(always)]
    pub fn inc_and_test(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_inc_and_test(self.0.get());
        }
    }
    /// See `atomic64_add_negative`.
    #[inline(always)]
    pub fn add_negative(&self, i: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_negative(i, self.0.get());
        }
    }
    /// See `atomic64_add_negative_acquire`.
    #[inline(always)]
    pub fn add_negative_acquire(&self, i: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_negative_acquire(i, self.0.get());
        }
    }
    /// See `atomic64_add_negative_release`.
    #[inline(always)]
    pub fn add_negative_release(&self, i: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_negative_release(i, self.0.get());
        }
    }
    /// See `atomic64_add_negative_relaxed`.
    #[inline(always)]
    pub fn add_negative_relaxed(&self, i: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_negative_relaxed(i, self.0.get());
        }
    }
    /// See `atomic64_fetch_add_unless`.
    #[inline(always)]
    pub fn fetch_add_unless(&self, a: i64, u: i64) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_fetch_add_unless(self.0.get(), a, u);
        }
    }
    /// See `atomic64_add_unless`.
    #[inline(always)]
    pub fn add_unless(&self, a: i64, u: i64) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_add_unless(self.0.get(), a, u);
        }
    }
    /// See `atomic64_inc_not_zero`.
    #[inline(always)]
    pub fn inc_not_zero(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_inc_not_zero(self.0.get());
        }
    }
    /// See `atomic64_inc_unless_negative`.
    #[inline(always)]
    pub fn inc_unless_negative(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_inc_unless_negative(self.0.get());
        }
    }
    /// See `atomic64_dec_unless_positive`.
    #[inline(always)]
    pub fn dec_unless_positive(&self) -> bool {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_dec_unless_positive(self.0.get());
        }
    }
    /// See `atomic64_dec_if_positive`.
    #[inline(always)]
    pub fn dec_if_positive(&self) -> i64 {
        // SAFETY:`self.0.get()` is a valid pointer.
        unsafe {
            return atomic64_dec_if_positive(self.0.get());
        }
    }
}

// 258c6b7d580a83146e21973b1068cc92d9e65b87
