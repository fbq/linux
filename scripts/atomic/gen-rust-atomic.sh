#!/bin/sh
# SPDX-License-Identifier: GPL-2.0

ATOMICDIR=$(dirname $0)

. ${ATOMICDIR}/atomic-tbl.sh

#gen_ret_type(meta, int)
gen_ret_type() {
	local meta="$1"; shift
	local int="$1"; shift

	case "${meta}" in
	[sv]) printf "";;
	[bB]) printf -- "-> bool ";;
	[aiIfFlR]) printf -- "-> ${int} ";;
	esac
}

# gen_param_type(arg, int)
gen_param_type()
{
	local type="${1%%:*}"; shift
	local int="$1"; shift

	case "${type}" in
	i) type="${int}";;
	p) type="&mut ${int}";;
	esac

	printf "${type}"
}

#gen_param(arg, int)
gen_param()
{
	local arg="$1"; shift
	local int="$1"; shift
	local name="$(gen_param_name "${arg}")"
	local type="$(gen_param_type "${arg}" "${int}")"

	printf "${name}: ${type}"
}

#gen_params(int, arg...)
gen_params()
{
	local int="$1"; shift

	while [ "$#" -gt 0 ]; do
		if [[ "$1" != "v" && "$1" != "cv" ]]; then
			printf ", "
			gen_param "$1" "${int}"
		fi
		shift;
	done
}

#gen_args(arg...)
gen_args()
{
	while [ "$#" -gt 0 ]; do
		if [[ "$1" == "v" || "$1" == "cv" ]]; then
			printf "self.0.get()"
			[ "$#" -gt 1 ] && printf ", "
		else
			printf "$(gen_param_name "$1")"
			[ "$#" -gt 1 ] && printf ", "
		fi
		shift;
	done
}

#gen_proto_order_variant(meta, pfx, name, sfx, order, atomic, ty, int, raw, arg...)
gen_proto_order_variant()
{
	local meta="$1"; shift
	local pfx="$1"; shift
	local name="$1"; shift
	local sfx="$1"; shift
	local order="$1"; shift
	local atomic="$1"; shift
	local ty="$1"; shift
	local int="$1"; shift
	local raw="$1"; shift

	local fn_name="${raw}${pfx}${name}${sfx}${order}"
	local atomicname="${raw}${atomic}_${pfx}${name}${sfx}${order}"

	local ret="$(gen_ret_type "${meta}" "${int}")"
	local params="$(gen_params "${int}" $@)"
	local args="$(gen_args "$@")"
	local retstmt="$(gen_ret_stmt "${meta}")"

cat <<EOF
    /// See \`${atomicname}\`.
    #[inline(always)]
    pub fn ${fn_name}(&self${params}) ${ret}{
        // SAFETY:\`self.0.get()\` is a valid pointer.
        unsafe {
            ${retstmt}${atomicname}(${args});
        }
    }
EOF
}

cat << EOF
// SPDX-License-Identifier: GPL-2.0

//! Generated by $0
//! DO NOT MODIFY THIS FILE DIRECTLY

use super::*;
use crate::bindings::*;

impl AtomicI32 {
EOF

grep '^[a-z]' "$1" | while read name meta args; do
	gen_proto "${meta}" "${name}" "atomic" "AtomicI32" "i32" "" ${args}
done

cat << EOF
}

impl AtomicI64 {
EOF

grep '^[a-z]' "$1" | while read name meta args; do
	gen_proto "${meta}" "${name}" "atomic64" "AtomicI64" "i64" "" ${args}
done

cat << EOF
}

EOF
